set.seed(2)
rbinom(1.227,0,50)
find rbinom\
?? rbinom
set.seed(2)
rbinom (1,2271,0.50)
1113/2271
set.seed(2)
rbinom (1,2271,0.50)
library(sf)
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
library(sf)
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
library(sf)
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
# Read the stores CSV file
stores_data <- read.csv("stores_NA.csv")
# Convert polygons data to an sf object
polygons_sf <- st_as_sf(polygons_data, wkt = "geometry", crs = st_crs(stores_data))
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
# Read the stores CSV file
stores_data <- read.csv("stores_NA.csv")
library(sf)
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
polygons_data <- read.csv("shapes_NA.csv")
polygons_data <- read.csv2("shapes_NA.csv")
print(current_directory)
# Check current working directory
current_directory <- getwd()
print(current_directory)
library(sf)
library(dplyr)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
# Read the stores CSV file
stores_data <- read.csv("stores_NA.csv")
# Check current working directory
current_directory <- getwd()
print(current_directory)
# Change working directory
setwd("E:/Masters Data Science/1st Sem/SLDA/Project")
current_directory <- getwd()
print(current_directory)
# Read the polygon CSV file
polygons_data <- st_read("shapes_NA.csv")
# Read the stores CSV file
stores_data <- read.csv("stores_NA.csv")
# Convert polygons data to an sf object
polygons_sf <- st_as_sf(polygons_data, wkt = "geometry", crs = st_crs(stores_data))
# Initialize an empty column for microcodes in the stores data
stores_data$microcode <- NA
# Loop through each store and check if it lies within any polygon
for (i in seq_len(nrow(stores_data))) {
store_point <- st_point(c(stores_data$Long[i], stores_data$Lat[i]))
# Check if the store point is within any polygon
within_polygon <- st_within(store_point, polygons_sf)
# If within_polygon is not NA, assign the microcode
if (length(within_polygon) > 0) {
indices <- unlist(within_polygon)
# Choose the first matching index
chosen_index <- indices[1]
stores_data$microcode[i] <- polygons_data$microcode[chosen_index]
}
}
# Save the result to a new CSV file
write.csv(stores_data, "result.csv", row.names = FALSE)
df_socio <- read.csv('socio_demo_NA.csv')
df_gravitation <- read.csv('gravitation_NA.csv')
df_store_microcode <- read.csv('result.csv')
merged_data <- df_store_microcode %>%
left_join(df_gravitation, by = "microcode") %>%
left_join(df_socio, by = "microcode")
df_socio <- read.csv('socio_demo_NA.csv')
install.packages("skimr")
skim(merged_data)
# Load the skimr package
library(skimr)
# Assuming merged_data is your data frame, you can use skim() on it
skim(merged_data)
View(merged_data)
merged_data %>% dplyr::group_by(Insegna)%>%skim()
merged_data %>% dplyr::group_by(Insegna)%>%skim()
merged_data %>% dplyr::group_by(Insegna)%>%skim()
plot(merged_data)
View(merged_data)
hist(merged_data$Cod3HD)
hist(merged_data$Inesegna)
write.csv(merged_data, "merged_data.csv", row.names = FALSE)
hist(merged_data$Potenziale)
View(merged_data)
# Install and load the GGally package if not already installed
install.packages("GGally")
library(GGally)
# Create a pair plot
ggpairs(merged_data[, 1:4], title = "Pair Plot of Iris Dataset")
merged_data2 <- merged_data[, -Insegna]
#merged_data2 <- merged_data[, -Insegna]
data <- subset(merged_data, select = -Insegna)
# Create a pair plot
ggpairs(data[, 1:4], title = "Pair Plot of Iris Dataset")
pairs(data[, 1:4], main = "Pair Plot of Iris Dataset")
pairs(data[, 1:3], main = "Pair Plot of Iris Dataset")
pairs(data[, 11:14], main = "Pair Plot of Iris Dataset")
pairs(data[, 11:14], main = "Pair Plot of Iris Dataset")
